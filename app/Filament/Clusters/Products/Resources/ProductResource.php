<?php

namespace App\Filament\Clusters\Products\Resources;

use AmidEsfahani\FilamentTinyEditor\TinyEditor;
use App\Filament\Clusters\Products;
use App\Filament\Clusters\Products\Resources\BrandResource\RelationManagers\ProductsRelationManager;
use App\Filament\Clusters\Products\Resources\ProductResource\Widgets\ProductStats;
use App\Models\Language;
use App\Models\Shop\Product;
use App\Models\ShopCategory;
use App\Models\ShopProduct;
use App\Models\Technologic;
use Filament\Forms;
use Filament\Forms\Components\SpatieMediaLibraryFileUpload;
use Filament\Forms\Form;
use Filament\Notifications\Notification;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Filters\QueryBuilder;
use Filament\Tables\Filters\QueryBuilder\Constraints\BooleanConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\DateConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\NumberConstraint;
use Filament\Tables\Filters\QueryBuilder\Constraints\TextConstraint;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class ProductResource extends Resource
{
    protected static ?string $model = ShopProduct::class;

    protected static ?string $cluster = Products::class;


    protected static ?string $recordTitleAttribute = 'name';

    protected static ?string $navigationIcon = 'heroicon-o-bolt';

    public static function getNavigationParentItem(): ?string
    {
        return __('main.Products'); // TODO: Change the autogenerated stub
    }

    public static function getNavigationLabel(): string
    {
        return __('main.Product'); // TODO: Change the autogenerated stub
    }

    public static function getLabel(): ?string
    {
        return __('main.Product');  // TODO: Change the autogenerated stub
    }

    protected static ?int $navigationSort = 0;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Group::make()
                    ->schema([
                        Forms\Components\Tabs::make('Tabs')
                            ->tabs([
                                Forms\Components\Tabs\Tab::make('O\'zbek')
                                    ->schema([
                                        Forms\Components\Section::make()
                                            ->schema([
                                                Forms\Components\TextInput::make('name_uz')
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->live(onBlur: true)
                                                    ->label(__('main.Name'))
                                                    ->afterStateUpdated(function (string $operation, $state, Forms\Set $set) {
                                                        if ($operation !== 'create') {
                                                            return;
                                                        }

                                                        $set('slug_uz', Str::slug($state));
                                                    }),

                                                Forms\Components\TextInput::make('slug_uz')
                                                    ->dehydrated()
                                                    ->label(__('main.Slug'))
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->unique(ShopProduct::class, 'slug_uz', ignoreRecord: true),

                                                TinyEditor::make('description_uz')
                                                    ->columnSpan('full')
                                                    ->label(__('main.Content')),
                                                Forms\Components\TextInput::make('meta_name_uz')
                                                    ->maxLength(255)
                                                    ->live(onBlur: true)
                                                    ->required()
                                                    ->label(__('main.MetaTitle')),

                                                Forms\Components\Textarea::make('meta_description_uz')
                                                    ->columnSpan('full')
                                                    ->rows(6)
                                                    ->label(__('main.MetaContent'))
                                                    ->required(),
                                            ])
                                    ]),
                                Forms\Components\Tabs\Tab::make('Pусский')
                                    ->schema([
                                        Forms\Components\Section::make()
                                            ->schema([
                                                Forms\Components\TextInput::make('name_ru')
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->live(onBlur: true)
                                                    ->label(__('main.Name'))
                                                    ->afterStateUpdated(function (string $operation, $state, Forms\Set $set) {
                                                        if ($operation !== 'create') {
                                                            return;
                                                        }

                                                        $set('slug_ru', Str::slug($state));
                                                    }),

                                                Forms\Components\TextInput::make('slug_ru')
                                                    ->dehydrated()
                                                    ->label(__('main.Slug'))
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->unique(ShopProduct::class, 'slug_ru', ignoreRecord: true),

                                                TinyEditor::make('description_ru')
                                                    ->columnSpan('full')
                                                    ->label(__('main.Content')),
                                                Forms\Components\TextInput::make('meta_name_ru')
                                                    ->maxLength(255)
                                                    ->live(onBlur: true)
                                                    ->required()
                                                    ->label(__('main.MetaTitle')),

                                                Forms\Components\Textarea::make('meta_description_ru')
                                                    ->columnSpan('full')
                                                    ->rows(6)
                                                    ->label(__('main.MetaContent'))
                                                    ->required(),
                                            ])
                                    ]),
                                Forms\Components\Tabs\Tab::make('English')
                                    ->schema([
                                        Forms\Components\Section::make()
                                            ->schema([
                                                Forms\Components\TextInput::make('name_en')
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->live(onBlur: true)
                                                    ->label(__('main.Name'))
                                                    ->afterStateUpdated(function (string $operation, $state, Forms\Set $set) {
                                                        if ($operation !== 'create') {
                                                            return;
                                                        }

                                                        $set('slug_en', Str::slug($state));
                                                    }),

                                                Forms\Components\TextInput::make('slug_en')
                                                    ->dehydrated()
                                                    ->label(__('main.Slug'))
                                                    ->required()
                                                    ->maxLength(255)
                                                    ->unique(ShopProduct::class, 'slug_en', ignoreRecord: true),

                                                TinyEditor::make('description_en')
                                                    ->columnSpan('full')
                                                    ->label(__('main.Content')),
                                                Forms\Components\TextInput::make('meta_name_en')
                                                    ->maxLength(255)
                                                    ->live(onBlur: true)
                                                    ->required()
                                                    ->label(__('main.MetaTitle')),

                                                Forms\Components\Textarea::make('meta_description_en')
                                                    ->columnSpan('full')
                                                    ->rows(6)
                                                    ->label(__('main.MetaContent'))
                                                    ->required(),
                                            ])
                                    ]),
                            ])
                            ->columns(2),
                    ])
                    ->columnSpan(['lg' => 2]),

                Forms\Components\Group::make()
                    ->schema([
                        Forms\Components\Section::make('Status')
                            ->schema([
                                Forms\Components\Toggle::make('is_visible')
                                    ->label(__('main.Visible'))
                                    ->helperText('This product will be hidden from all sales channels.')
                                    ->default(true),

                                Forms\Components\DatePicker::make('published_at')
                                    ->label('Availability')
                                    ->default(now())
                                    ->required(),
                            ]),

                        Forms\Components\Section::make(__('main.Associations'))
                            ->schema([
                                Forms\Components\Select::make('shop_brand_id')
                                    ->label(__('main.Brand'))
                                    ->options(
                                        \App\Models\ShopBrand::all()->pluck('name_' . app()->getLocale(), 'id')
                                    )
                                    ->searchable()
                                    ->hiddenOn(ProductsRelationManager::class)
                                    ->required(),

                                Forms\Components\Select::make('technologic_id')
                                    ->options(Technologic::pluck('name_' . app()->getLocale(), 'id'))
                                    ->label(__('main.TechnologicalCategory'))
                                    ->searchable(),

                                Forms\Components\Select::make('categories')
                                    ->relationship('categories', 'name_' . app()->getLocale())
                                    ->options(fn () => \App\Models\ShopCategory::pluck('name_' . app()->getLocale(), 'id')->toArray())
                                    ->label(__('main.ShopCategory'))
                                    ->searchable()
                                    ->multiple()
                                    ->required(),
                            ]),
//                        Forms\Components\Section::make(__('main.Pricing'))
//                            ->schema([
//                                Forms\Components\TextInput::make('price')
//                                    ->numeric()
//                                    ->label(__('main.Price'))
//                                    ->rules(['regex:/^\d{1,12}(\.\d{0,2})?$/'])
//                                    ->nullable(),
//                            ]),
                          Forms\Components\Section::make(__('main.Image'))
                              ->schema([
                                  SpatieMediaLibraryFileUpload::make('media')
                                      ->collection('product-images')
                                      ->multiple()
                                      ->imageEditor()
                                      ->maxFiles(5)
                                      ->hiddenLabel(),
                              ])
                    ])
                    ->columnSpan(['lg' => 1]),
            ])
            ->columns(3);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\SpatieMediaLibraryImageColumn::make('product-image')
                    ->label(__('main.Image'))
                    ->collection('product-images'),

                Tables\Columns\TextColumn::make('name_' . app()->getLocale())
                    ->label(__('main.Name'))
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('brand.name_' . app()->getLocale())
                    ->label(__('main.Brand'))
                    ->searchable()
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\IconColumn::make('is_visible')
                    ->label(__('main.Visible'))
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('price')
                    ->label(__('main.Price'))
                    ->searchable()
                    ->sortable(),

                Tables\Columns\TextColumn::make('sku')
                    ->label(__('main.SKU'))
                    ->searchable()
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('qty')
                    ->label(__('main.Quantity'))
                    ->searchable()
                    ->sortable()
                    ->toggleable(),

                Tables\Columns\TextColumn::make('security_stock')
                    ->searchable()
                    ->label(__('main.Stock'))
                    ->sortable()
                    ->toggleable()
                    ->toggledHiddenByDefault(),

            ])
            ->filters([
                QueryBuilder::make()
                    ->constraints([
                        TextConstraint::make('name_' . app()->getLocale()),
                        TextConstraint::make('slug_' . app()->getLocale()),
                        TextConstraint::make('sku')
                            ->label('SKU (Stock Keeping Unit)'),
                        TextConstraint::make('barcode')
                            ->label('Barcode (ISBN, UPC, GTIN, etc.)'),
                        TextConstraint::make('description'),
                        NumberConstraint::make('old_price')
                            ->label(__('main.Compare'))
                            ->icon('heroicon-m-currency-dollar'),
                        NumberConstraint::make('price')
                            ->label(__('main.Price'))
                            ->icon('heroicon-m-currency-dollar'),
                        NumberConstraint::make('cost')
                            ->label(__('main.Cost'))
                            ->icon('heroicon-m-currency-dollar'),
                        NumberConstraint::make('qty')
                            ->label(__('main.Quantity')),
                        NumberConstraint::make('security_stock'),
                        BooleanConstraint::make('is_visible')
                            ->label(__('main.Visible')),
                    ])
                    ->constraintPickerColumns(2),
            ], layout: Tables\Enums\FiltersLayout::AboveContentCollapsible)
            ->deferFilters()
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->groupedBulkActions([
                Tables\Actions\DeleteBulkAction::make()
                    ->action(function () {
                        Notification::make()
                            ->title('Now, now, don\'t be cheeky, leave some records for others to play with!')
                            ->warning()
                            ->send();
                    }),
            ]);
    }

    public static function getRelations(): array
    {
        return [
//            \App\Filament\Clusters\Products\Resources\ProductResource\RelationManagers\CommentsRelationManager::class,
        ];
    }

    public static function getWidgets(): array
    {
        return [
            ProductStats::class,
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => \App\Filament\Clusters\Products\Resources\ProductResource\Pages\ListProducts::route('/'),
            'create' => \App\Filament\Clusters\Products\Resources\ProductResource\Pages\CreateProduct::route('/create'),
            'edit' => \App\Filament\Clusters\Products\Resources\ProductResource\Pages\EditProduct::route('/{record}/edit'),
        ];
    }

    public static function getGloballySearchableAttributes(): array
    {
        return ['name' . app()->getLocale(), 'sku', 'brand.name' . app()->getLocale()];
    }

    public static function getGlobalSearchResultDetails(Model $record): array
    {


        return [
            'Brand' => optional($record->brand)->name,
        ];
    }


    public static function getGlobalSearchEloquentQuery(): Builder
    {
        return parent::getGlobalSearchEloquentQuery()->with(['brand']);
    }

    public static function getNavigationBadge(): ?string
    {
        $modelClass = static::$model;

        return (string)$modelClass::whereColumn('qty', '<', 'security_stock')->count();
    }
}

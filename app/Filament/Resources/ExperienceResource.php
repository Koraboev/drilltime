<?php

namespace App\Filament\Resources;

use App\Filament\Resources\ExperienceResource\Pages;
use App\Filament\Resources\ExperienceResource\RelationManagers;
use App\Models\Experience;
use Filament\Forms;
use Filament\Forms\Form;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class ExperienceResource extends Resource
{
    protected static ?string $model = Experience::class;

    protected static ?string $navigationIcon = 'heroicon-o-calendar-date-range';

    protected static ?string $navigationGroup='Home page';
    public static function getNavigationGroup(): ?string
    {
        return __('main.Home'); // TODO: Change the autogenerated stub
    }
    public static function getLabel(): ?string
    {
        return __('main.Experience'); // TODO: Change the autogenerated stub
    }
   public static function getNavigationLabel(): string
   {
       return __('main.Experience');  // TODO: Change the autogenerated stub
   }

    protected static ?int $navigationSort=3;

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Forms\Components\Section::make()
                    ->schema([
                        Forms\Components\Tabs::make('Tabs')
                            ->tabs([
                                Forms\Components\Tabs\Tab::make('O\'zbek')
                                    ->schema([
                                        Forms\Components\TextInput::make('title_uz')
                                            ->label(__('main.Title'))
                                            ->required()
                                            ->maxLength(255)
                                            ->live(onBlur: true),


                                        Forms\Components\RichEditor::make('description_uz')
                                        ->label(__('main.Content'))

                                    ]),

                                Forms\Components\Tabs\Tab::make('русский')
                                    ->schema([
                                        Forms\Components\TextInput::make('title_ru')
                                            ->label(__('main.Title'))
                                            ->required()
                                            ->maxLength(255)
                                            ->live(onBlur: true),

                                        Forms\Components\RichEditor::make('description_ru')
                                            ->label(__('main.Content'))



                                    ]),


                                Forms\Components\Tabs\Tab::make('English')
                                    ->schema([
                                        Forms\Components\TextInput::make('title_en')
                                            ->label(__('main.Title'))
                                            ->required()
                                            ->maxLength(255)
                                            ->live(onBlur: true),
                                        Forms\Components\RichEditor::make('description_en')
                                            ->label(__('main.Content'))


                                    ]),
                            ])
                            ->columnSpan('full'),
                    ])
            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                Tables\Columns\TextColumn::make('title_'.app()->getLocale())->label(__('main.Title')),
                TextColumn::make('description_'.app()->getLocale())->label(__('main.Content')),
            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                ]),
            ]);
    }

    public static function getRelations(): array
    {
        return [
            //
        ];
    }

    public static function getPages(): array
    {
        return [
            'index' => Pages\ListExperiences::route('/'),
            'create' => Pages\CreateExperience::route('/create'),
            'edit' => Pages\EditExperience::route('/{record}/edit'),
        ];
    }
}
